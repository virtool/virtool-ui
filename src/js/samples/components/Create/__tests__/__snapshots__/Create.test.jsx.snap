// Vitest Snapshot v1

exports[`<CreateSample> > should render 1`] = `
<Fragment>
  <ViewHeader
    title="Create Sample"
  >
    <ViewHeaderTitle>
      Create Sample
    </ViewHeaderTitle>
    <Styled(InputError) />
  </ViewHeader>
  <Formik
    initialValues={
      {
        "group": null,
        "host": "",
        "isolate": "",
        "libraryType": "normal",
        "locale": "",
        "name": "",
        "readFiles": [],
        "sidebar": {
          "labels": [],
          "subtractionIds": [],
        },
      }
    }
    onSubmit={[Function]}
    validationSchema={
      ObjectSchema {
        "_blacklist": ReferenceSet {
          "list": Set {},
          "refs": Map {},
        },
        "_blacklistError": undefined,
        "_excludedEdges": [],
        "_nodes": [
          "readFiles",
          "name",
        ],
        "_sortErrors": [Function],
        "_typeError": [Function],
        "_whitelist": ReferenceSet {
          "list": Set {},
          "refs": Map {},
        },
        "_whitelistError": undefined,
        "conditions": [],
        "deps": [],
        "exclusiveTests": {},
        "fields": {
          "name": StringSchema {
            "_blacklist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_blacklistError": undefined,
            "_mutate": undefined,
            "_typeError": [Function],
            "_whitelist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_whitelistError": undefined,
            "conditions": [],
            "deps": [],
            "exclusiveTests": {
              "required": true,
            },
            "spec": {
              "abortEarly": true,
              "nullable": false,
              "presence": "required",
              "recursive": true,
              "strict": false,
              "strip": false,
            },
            "tests": [
              [Function],
            ],
            "transforms": [
              [Function],
            ],
            "type": "string",
          },
          "readFiles": ArraySchema {
            "_blacklist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_blacklistError": undefined,
            "_typeError": [Function],
            "_whitelist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_whitelistError": undefined,
            "conditions": [],
            "deps": [],
            "exclusiveTests": {
              "min": true,
            },
            "innerType": undefined,
            "spec": {
              "abortEarly": true,
              "nullable": false,
              "presence": "optional",
              "recursive": true,
              "strict": false,
              "strip": false,
            },
            "tests": [
              [Function],
            ],
            "transforms": [
              [Function],
            ],
            "type": "array",
          },
        },
        "spec": {
          "abortEarly": true,
          "nullable": false,
          "presence": "optional",
          "recursive": true,
          "strict": false,
          "strip": false,
        },
        "tests": [],
        "transforms": [
          [Function],
        ],
        "type": "object",
      }
    }
  >
    <Component />
  </Formik>
</Fragment>
`;

exports[`<CreateSample> > should render LoadingPlaceholder when [props.readyReads=null] 1`] = `
<LoadingPlaceholder
  margin="36px"
/>
`;

exports[`<CreateSample> > should render LoadingPlaceholder when [props.subtractions=null] 1`] = `
<LoadingPlaceholder
  margin="36px"
/>
`;
