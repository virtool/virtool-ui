// Vitest Snapshot v1

exports[`<JobItem /> > should render when [canCancel=%p] and [canArchive=%p] false false 1`] = `
<Styled(Box)>
  <ProgressBarAffixed
    color="green"
    now={100}
  />
  <styled.div>
    <Link
      to="/jobs/foo"
    >
      Build Index
    </Link>
    <styled.div>
      <JobStatus
        pad={false}
      />
      <JobAction
        canArchive={false}
        canCancel={false}
        onArchive={[Function]}
        onCancel={[Function]}
      />
    </styled.div>
  </styled.div>
  <Attribution
    time="Foo"
    user="bob"
  />
</Styled(Box)>
`;

exports[`<JobItem /> > should render when [canCancel=%p] and [canArchive=%p] false true 1`] = `
<Styled(Box)>
  <ProgressBarAffixed
    color="green"
    now={100}
  />
  <styled.div>
    <Link
      to="/jobs/foo"
    >
      Build Index
    </Link>
    <styled.div>
      <JobStatus
        pad={true}
      />
      <JobAction
        canArchive={true}
        canCancel={false}
        onArchive={[Function]}
        onCancel={[Function]}
      />
    </styled.div>
  </styled.div>
  <Attribution
    time="Foo"
    user="bob"
  />
</Styled(Box)>
`;

exports[`<JobItem /> > should render when [canCancel=%p] and [canArchive=%p] true false 1`] = `
<Styled(Box)>
  <ProgressBarAffixed
    color="green"
    now={100}
  />
  <styled.div>
    <Link
      to="/jobs/foo"
    >
      Build Index
    </Link>
    <styled.div>
      <JobStatus
        pad={true}
      />
      <JobAction
        canArchive={false}
        canCancel={true}
        onArchive={[Function]}
        onCancel={[Function]}
      />
    </styled.div>
  </styled.div>
  <Attribution
    time="Foo"
    user="bob"
  />
</Styled(Box)>
`;

exports[`<JobItem /> > should render when [canCancel=%p] and [canArchive=%p] true true 1`] = `
<Styled(Box)>
  <ProgressBarAffixed
    color="green"
    now={100}
  />
  <styled.div>
    <Link
      to="/jobs/foo"
    >
      Build Index
    </Link>
    <styled.div>
      <JobStatus
        pad={true}
      />
      <JobAction
        canArchive={true}
        canCancel={true}
        onArchive={[Function]}
        onCancel={[Function]}
      />
    </styled.div>
  </styled.div>
  <Attribution
    time="Foo"
    user="bob"
  />
</Styled(Box)>
`;

exports[`<JobItem /> > should render when [state=%p] cancelled 1`] = `
<Styled(Box)>
  <ProgressBarAffixed
    color="red"
    now={100}
  />
  <styled.div>
    <Link
      to="/jobs/foo"
    >
      Build Index
    </Link>
    <styled.div>
      <JobStatus
        pad={true}
        state="cancelled"
      />
      <JobAction
        canArchive={true}
        canCancel={true}
        key="cancelled"
        onArchive={[Function]}
        onCancel={[Function]}
        state="cancelled"
      />
    </styled.div>
  </styled.div>
  <Attribution
    time="Foo"
    user="bob"
  />
</Styled(Box)>
`;

exports[`<JobItem /> > should render when [state=%p] complete 1`] = `
<Styled(Box)>
  <ProgressBarAffixed
    color="green"
    now={100}
  />
  <styled.div>
    <Link
      to="/jobs/foo"
    >
      Build Index
    </Link>
    <styled.div>
      <JobStatus
        pad={true}
        state="complete"
      />
      <JobAction
        canArchive={true}
        canCancel={true}
        key="complete"
        onArchive={[Function]}
        onCancel={[Function]}
        state="complete"
      />
    </styled.div>
  </styled.div>
  <Attribution
    time="Foo"
    user="bob"
  />
</Styled(Box)>
`;

exports[`<JobItem /> > should render when [state=%p] error 1`] = `
<Styled(Box)>
  <ProgressBarAffixed
    color="red"
    now={100}
  />
  <styled.div>
    <Link
      to="/jobs/foo"
    >
      Build Index
    </Link>
    <styled.div>
      <JobStatus
        pad={true}
        state="error"
      />
      <JobAction
        canArchive={true}
        canCancel={true}
        key="error"
        onArchive={[Function]}
        onCancel={[Function]}
        state="error"
      />
    </styled.div>
  </styled.div>
  <Attribution
    time="Foo"
    user="bob"
  />
</Styled(Box)>
`;

exports[`<JobItem /> > should render when [state=%p] running 1`] = `
<Styled(Box)>
  <ProgressBarAffixed
    color="blue"
    now={100}
  />
  <styled.div>
    <Link
      to="/jobs/foo"
    >
      Build Index
    </Link>
    <styled.div>
      <JobStatus
        pad={true}
        state="running"
      />
      <JobAction
        canArchive={true}
        canCancel={true}
        key="running"
        onArchive={[Function]}
        onCancel={[Function]}
        state="running"
      />
    </styled.div>
  </styled.div>
  <Attribution
    time="Foo"
    user="bob"
  />
</Styled(Box)>
`;

exports[`<JobItem /> > should render when [state=%p] waiting 1`] = `
<Styled(Box)>
  <ProgressBarAffixed
    color="green"
    now={100}
  />
  <styled.div>
    <Link
      to="/jobs/foo"
    >
      Build Index
    </Link>
    <styled.div>
      <JobStatus
        pad={true}
        state="waiting"
      />
      <JobAction
        canArchive={true}
        canCancel={true}
        key="waiting"
        onArchive={[Function]}
        onCancel={[Function]}
        state="waiting"
      />
    </styled.div>
  </styled.div>
  <Attribution
    time="Foo"
    user="bob"
  />
</Styled(Box)>
`;
