// Vitest Snapshot v1

exports[`<Toolbar /> > should render 1`] = `
<Styled(Toolbar)>
  <ForwardRef
    onChange={[Function]}
    onKeyDown={[Function]}
  />
  <AnalysisViewerSort
    onSelect={[MockFunction spy]}
    sortKey="coverage"
    workflow="pathoscope"
  />
  <Button
    onClick={[MockFunction spy]}
    tip="Sort List"
    title="Sort Direction"
  >
    <Icon
      name="sort-amount-down"
    />
  </Button>
  <Button
    active={false}
    icon="weight-hanging"
    onClick={[MockFunction spy]}
    tip="Show read pseudo-counts instead of weight"
  >
    Show Reads
  </Button>
  <Button
    active={true}
    icon="filter"
    onClick={[MockFunction spy]}
    tip="Hide OTUs with low coverage support"
  >
    Filter OTUs
  </Button>
  <Button
    active={true}
    icon="filter"
    onClick={[MockFunction spy]}
    tip="Hide isolates with low coverage support"
  >
    Filter Isolates
  </Button>
  <Dropdown>
    <DropdownButton>
      <span>
        <Icon
          name="file-download"
        />
         Export 
        <Icon
          name="caret-down"
        />
      </span>
    </DropdownButton>
    <DropdownMenuList>
      <DropdownMenuDownload
        href="/api/analyses/documents/foo.csv"
      >
        <Icon
          name="file-csv"
        />
         CSV
      </DropdownMenuDownload>
      <DropdownMenuDownload
        href="/api/analyses/documents/foo.xlsx"
      >
        <Icon
          name="file-excel"
        />
         Excel
      </DropdownMenuDownload>
    </DropdownMenuList>
  </Dropdown>
</Styled(Toolbar)>
`;

exports[`<Toolbar /> > should render when [filterIsolates=false] 1`] = `
<Styled(Toolbar)>
  <ForwardRef
    onChange={[Function]}
    onKeyDown={[Function]}
  />
  <AnalysisViewerSort
    onSelect={[MockFunction spy]}
    sortKey="coverage"
    workflow="pathoscope"
  />
  <Button
    onClick={[MockFunction spy]}
    tip="Sort List"
    title="Sort Direction"
  >
    <Icon
      name="sort-amount-down"
    />
  </Button>
  <Button
    active={false}
    icon="weight-hanging"
    onClick={[MockFunction spy]}
    tip="Show read pseudo-counts instead of weight"
  >
    Show Reads
  </Button>
  <Button
    active={true}
    icon="filter"
    onClick={[MockFunction spy]}
    tip="Hide OTUs with low coverage support"
  >
    Filter OTUs
  </Button>
  <Button
    active={false}
    icon="filter"
    onClick={[MockFunction spy]}
    tip="Hide isolates with low coverage support"
  >
    Filter Isolates
  </Button>
  <Dropdown>
    <DropdownButton>
      <span>
        <Icon
          name="file-download"
        />
         Export 
        <Icon
          name="caret-down"
        />
      </span>
    </DropdownButton>
    <DropdownMenuList>
      <DropdownMenuDownload
        href="/api/analyses/documents/foo.csv"
      >
        <Icon
          name="file-csv"
        />
         CSV
      </DropdownMenuDownload>
      <DropdownMenuDownload
        href="/api/analyses/documents/foo.xlsx"
      >
        <Icon
          name="file-excel"
        />
         Excel
      </DropdownMenuDownload>
    </DropdownMenuList>
  </Dropdown>
</Styled(Toolbar)>
`;

exports[`<Toolbar /> > should render when [filterOTUs=false] 1`] = `
<Styled(Toolbar)>
  <ForwardRef
    onChange={[Function]}
    onKeyDown={[Function]}
  />
  <AnalysisViewerSort
    onSelect={[MockFunction spy]}
    sortKey="coverage"
    workflow="pathoscope"
  />
  <Button
    onClick={[MockFunction spy]}
    tip="Sort List"
    title="Sort Direction"
  >
    <Icon
      name="sort-amount-down"
    />
  </Button>
  <Button
    active={false}
    icon="weight-hanging"
    onClick={[MockFunction spy]}
    tip="Show read pseudo-counts instead of weight"
  >
    Show Reads
  </Button>
  <Button
    active={false}
    icon="filter"
    onClick={[MockFunction spy]}
    tip="Hide OTUs with low coverage support"
  >
    Filter OTUs
  </Button>
  <Button
    active={true}
    icon="filter"
    onClick={[MockFunction spy]}
    tip="Hide isolates with low coverage support"
  >
    Filter Isolates
  </Button>
  <Dropdown>
    <DropdownButton>
      <span>
        <Icon
          name="file-download"
        />
         Export 
        <Icon
          name="caret-down"
        />
      </span>
    </DropdownButton>
    <DropdownMenuList>
      <DropdownMenuDownload
        href="/api/analyses/documents/foo.csv"
      >
        <Icon
          name="file-csv"
        />
         CSV
      </DropdownMenuDownload>
      <DropdownMenuDownload
        href="/api/analyses/documents/foo.xlsx"
      >
        <Icon
          name="file-excel"
        />
         Excel
      </DropdownMenuDownload>
    </DropdownMenuList>
  </Dropdown>
</Styled(Toolbar)>
`;

exports[`<Toolbar /> > should render when [showPathoscopeReads=true] 1`] = `
<Styled(Toolbar)>
  <ForwardRef
    onChange={[Function]}
    onKeyDown={[Function]}
  />
  <AnalysisViewerSort
    onSelect={[MockFunction spy]}
    sortKey="coverage"
    workflow="pathoscope"
  />
  <Button
    onClick={[MockFunction spy]}
    tip="Sort List"
    title="Sort Direction"
  >
    <Icon
      name="sort-amount-down"
    />
  </Button>
  <Button
    active={true}
    icon="weight-hanging"
    onClick={[MockFunction spy]}
    tip="Show read pseudo-counts instead of weight"
  >
    Show Reads
  </Button>
  <Button
    active={true}
    icon="filter"
    onClick={[MockFunction spy]}
    tip="Hide OTUs with low coverage support"
  >
    Filter OTUs
  </Button>
  <Button
    active={true}
    icon="filter"
    onClick={[MockFunction spy]}
    tip="Hide isolates with low coverage support"
  >
    Filter Isolates
  </Button>
  <Dropdown>
    <DropdownButton>
      <span>
        <Icon
          name="file-download"
        />
         Export 
        <Icon
          name="caret-down"
        />
      </span>
    </DropdownButton>
    <DropdownMenuList>
      <DropdownMenuDownload
        href="/api/analyses/documents/foo.csv"
      >
        <Icon
          name="file-csv"
        />
         CSV
      </DropdownMenuDownload>
      <DropdownMenuDownload
        href="/api/analyses/documents/foo.xlsx"
      >
        <Icon
          name="file-excel"
        />
         Excel
      </DropdownMenuDownload>
    </DropdownMenuList>
  </Dropdown>
</Styled(Toolbar)>
`;

exports[`<Toolbar /> > should render when [sortDescending=false] 1`] = `
<Styled(Toolbar)>
  <ForwardRef
    onChange={[Function]}
    onKeyDown={[Function]}
  />
  <AnalysisViewerSort
    onSelect={[MockFunction spy]}
    sortKey="coverage"
    workflow="pathoscope"
  />
  <Button
    onClick={[MockFunction spy]}
    tip="Sort List"
    title="Sort Direction"
  >
    <Icon
      name="sort-amount-down"
    />
  </Button>
  <Button
    active={false}
    icon="weight-hanging"
    onClick={[MockFunction spy]}
    tip="Show read pseudo-counts instead of weight"
  >
    Show Reads
  </Button>
  <Button
    active={true}
    icon="filter"
    onClick={[MockFunction spy]}
    tip="Hide OTUs with low coverage support"
  >
    Filter OTUs
  </Button>
  <Button
    active={true}
    icon="filter"
    onClick={[MockFunction spy]}
    tip="Hide isolates with low coverage support"
  >
    Filter Isolates
  </Button>
  <Dropdown>
    <DropdownButton>
      <span>
        <Icon
          name="file-download"
        />
         Export 
        <Icon
          name="caret-down"
        />
      </span>
    </DropdownButton>
    <DropdownMenuList>
      <DropdownMenuDownload
        href="/api/analyses/documents/foo.csv"
      >
        <Icon
          name="file-csv"
        />
         CSV
      </DropdownMenuDownload>
      <DropdownMenuDownload
        href="/api/analyses/documents/foo.xlsx"
      >
        <Icon
          name="file-excel"
        />
         Excel
      </DropdownMenuDownload>
    </DropdownMenuList>
  </Dropdown>
</Styled(Toolbar)>
`;

exports[`<Toolbar /> > should render when [sortKey=%p] depth 1`] = `
<Styled(Toolbar)>
  <ForwardRef
    onChange={[Function]}
    onKeyDown={[Function]}
  />
  <AnalysisViewerSort
    onSelect={[MockFunction spy]}
    sortKey="depth"
    workflow="pathoscope"
  />
  <Button
    onClick={[MockFunction spy]}
    tip="Sort List"
    title="Sort Direction"
  >
    <Icon
      name="sort-amount-down"
    />
  </Button>
  <Button
    active={false}
    icon="weight-hanging"
    onClick={[MockFunction spy]}
    tip="Show read pseudo-counts instead of weight"
  >
    Show Reads
  </Button>
  <Button
    active={true}
    icon="filter"
    onClick={[MockFunction spy]}
    tip="Hide OTUs with low coverage support"
  >
    Filter OTUs
  </Button>
  <Button
    active={true}
    icon="filter"
    onClick={[MockFunction spy]}
    tip="Hide isolates with low coverage support"
  >
    Filter Isolates
  </Button>
  <Dropdown>
    <DropdownButton>
      <span>
        <Icon
          name="file-download"
        />
         Export 
        <Icon
          name="caret-down"
        />
      </span>
    </DropdownButton>
    <DropdownMenuList>
      <DropdownMenuDownload
        href="/api/analyses/documents/foo.csv"
      >
        <Icon
          name="file-csv"
        />
         CSV
      </DropdownMenuDownload>
      <DropdownMenuDownload
        href="/api/analyses/documents/foo.xlsx"
      >
        <Icon
          name="file-excel"
        />
         Excel
      </DropdownMenuDownload>
    </DropdownMenuList>
  </Dropdown>
</Styled(Toolbar)>
`;

exports[`<Toolbar /> > should render when [sortKey=%p] weight 1`] = `
<Styled(Toolbar)>
  <ForwardRef
    onChange={[Function]}
    onKeyDown={[Function]}
  />
  <AnalysisViewerSort
    onSelect={[MockFunction spy]}
    sortKey="weight"
    workflow="pathoscope"
  />
  <Button
    onClick={[MockFunction spy]}
    tip="Sort List"
    title="Sort Direction"
  >
    <Icon
      name="sort-amount-down"
    />
  </Button>
  <Button
    active={false}
    icon="weight-hanging"
    onClick={[MockFunction spy]}
    tip="Show read pseudo-counts instead of weight"
  >
    Show Reads
  </Button>
  <Button
    active={true}
    icon="filter"
    onClick={[MockFunction spy]}
    tip="Hide OTUs with low coverage support"
  >
    Filter OTUs
  </Button>
  <Button
    active={true}
    icon="filter"
    onClick={[MockFunction spy]}
    tip="Hide isolates with low coverage support"
  >
    Filter Isolates
  </Button>
  <Dropdown>
    <DropdownButton>
      <span>
        <Icon
          name="file-download"
        />
         Export 
        <Icon
          name="caret-down"
        />
      </span>
    </DropdownButton>
    <DropdownMenuList>
      <DropdownMenuDownload
        href="/api/analyses/documents/foo.csv"
      >
        <Icon
          name="file-csv"
        />
         CSV
      </DropdownMenuDownload>
      <DropdownMenuDownload
        href="/api/analyses/documents/foo.xlsx"
      >
        <Icon
          name="file-excel"
        />
         Excel
      </DropdownMenuDownload>
    </DropdownMenuList>
  </Dropdown>
</Styled(Toolbar)>
`;
